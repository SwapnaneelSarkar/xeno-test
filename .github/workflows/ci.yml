name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: xeno_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate Prisma client
      run: npx prisma generate
    
    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/xeno_test
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/xeno_test
        DATABASE_URL_TEST: postgresql://postgres:postgres@localhost:5432/xeno_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key
        WEBHOOK_SECRET: test-webhook-secret
    
    - name: Start application
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:8080/health || exit 1
      env:
        NODE_ENV: production
        RAILWAY_ENVIRONMENT: production
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/xeno_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key
        WEBHOOK_SECRET: test-webhook-secret
        PORT: 8080

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --only=production
    
    - name: Generate Prisma client
      run: npx prisma generate
    
    - name: Build Docker image
      run: docker build -t xeno-fde-backend:${{ github.sha }} .
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8080:8080 \
          -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
          -e NODE_ENV=test \
          xeno-fde-backend:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container
        docker rm test-container